
# /home/miniconda3/envs/sd_python310/bin/python -m pip install virtualenv 或者 /home/miniconda3/bin/conda install -n sd_python310 virtualenv
# && /home/miniconda3/envs/sd_python310/bin/python  launch_gcp.py --skip-torch-cuda-test  \ 原来用这个，后来改为python -c的方式
# 使用 --skip-torch-cuda-test, 因为cloudbuild.yaml的machineType是没有GPU的； 另一种思路，取消这个参数，但是cloudbuild.yaml的machineType改成有GPU的也可以尝试下；----可以用打好的镜像创建一个ubuntu的pod参考deployment_ubuntu_sd_test.yaml进行调试
# 独立部署时， 如果出现安装gfpgan报错，可以先尝试安装/home/miniconda3/envs/sd_python310/bin/python -m pip install cython==0.29.34
#
# AddNet如何报错，可能是lora的的模型不完整，删除不完整的lora即可----重要
# 
# 安装Auto-Photoshop-StableDiffusion-Plugin插件
# git clone https://github.com/AbdullahAlfaraj/Auto-Photoshop-StableDiffusion-Plugin
# cd Auto-Photoshop-StableDiffusion-Plugin
# git checkout 745d541a6298ce58ea8a135349978c864106836d
# pip install -r requirements.txt  # 可以不执行，启动sdwebui会自动执行
# 修改
# /Users/yuanxiao/workspace/0yxgithub/Auto-Photoshop-StableDiffusion-Plugin/install.py
# auto_update=False # 否则会自动更新
#
# 一些插件需要用到的命令
# sd-webui-additional-networks ----- 暂时不安装 -----
# echo ---------start ln additional networks-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
# rm -rf /home/stable-diffusion-webui/extensions/sd-webui-additional-networks/models/lora/* && \
# ln -s /mnt/sdwebui_public/public/models/Lora  /home/stable-diffusion-webui/extensions/sd-webui-additional-networks/models/lora/
#
# 成功版本记录: 
# https://github.com/yuan6785/stable-diffusion-webui.git

#  https://github.com/thomasasfk/sd-webui-aspect-ratio-helper.git  这个插件的源码可以重点读一下，很有参考价值

#
# 升级到最新版本的命令:-------重要
# cd stable-diffusion-webui; git checkout develop; git add .; git commit  -am "1"; git checkout master; git pull; git checkout develop; git merge v1.5.0  # 这里的v1.5.0也可以其他的commit号a3ddf464a2ed24c999f67ddfef7969f8291567be
# python -c "import launch;launch.prepare_environment();"  安装第三方包

# 上一个成功版本 ： branch:20230515 submit:   e4cd0e1abc89713d7c1ac7f1f37ea8359c49d7ec
# 目前版本:  branch:master   submit:  a3ddf464a2ed24c999f67ddfef7969f8291567be
#
RUN set -ex \
    && bash Miniconda3-py38_23.1.0-1-Linux-x86_64.sh -b -p /home/miniconda3 \
    && /home/miniconda3/bin/conda init \
    && /home/miniconda3/bin/conda create -y --name sd_python310_20231102 python=3.10 \
    && /home/miniconda3/bin/conda install -y -n sd_python310_20231102 virtualenv \
    && git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui \
    && cd stable-diffusion-webui \
    && git checkout -b develop v1.6.0 \
    && /home/miniconda3/envs/sd_python310_20231102/bin/python -m pip install cython==0.29.36 \  # 重要步骤，先安装
    && /home/miniconda3/envs/sd_python310_20231102/bin/python -c "import launch;launch.prepare_environment();" --skip-torch-cuda-test \
    && cd extensions \
    # && git clone https://github.com/KohakuBlueleaf/a1111-sd-webui-lycoris.git && cd a1111-sd-webui-lycoris && git checkout -b develop  df9c0093bc9e079487302d3ed3f5db4337d6f19a && cd .. \   可用可不用，默认的sdwebui已经支持这个了
    && git clone https://github.com/DominikDoom/a1111-sd-webui-tagcomplete.git && cd a1111-sd-webui-tagcomplete && git checkout -b develop 2.10.6 && cd .. \
    git clone  https://github.com/d8ahazard/sd_dreambooth_extension && cd sd_dreambooth_extension && git checkout -b develop  c2a5617c587b812b5a408143ddfb18fc49234edf && cd ..   # 这个不升级和以前的版本一样，因为最新版本有很多bug，生成的lora不能用
    && git clone https://github.com/Mikubill/sd-webui-controlnet.git && cd sd-webui-controlnet && git checkout -b develop 05ef0b1cd1374cf285dd8d5ccd7db9997549893c && cd .. \
    && git clone https://github.com/fkunn1326/openpose-editor && cd openpose-editor && git checkout -b develop  c935771507f57201e26f4ed507aa47f3812ca491 && cd .. \
    # && git clone https://github.com/hnmr293/posex && cd posex && git checkout -b develop 292f92d5068046f988fe002eb0a43b8841ad449e && cd .. \     废弃，新版本无法生效
    # && git clone https://github.com/kohya-ss/sd-webui-additional-networks && cd sd-webui-additional-networks && git checkout -b develop v0.5.0 && cd .. \       废弃，感觉没有人用
    && git clone https://github.com/jexom/sd-webui-depth-lib.git && cd sd-webui-depth-lib && git checkout -b develop  efa9f616b30ea0f27e5dadf40ab41815012d1d78 && cd .. \
    # sadtalker需要的
    # 老模型下载 https://github.com/OpenTalker/SadTalker/releases 新版本的教程不太对，要把一些老模型下载下来才能用
    && git clone https://github.com/OpenTalker/SadTalker && cd SadTalker && git checkout -b develop v0.0.2-rc  && cd .. \
    && git clone https://github.com/thomasasfk/sd-webui-aspect-ratio-helper.git && cd sd-webui-aspect-ratio-helper && git checkout -b develop  99fcf9b0a4e3f8c8cac07b12d17b66f12297b828 && cd .. \
    && git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui-rembg.git && cd stable-diffusion-webui-rembg && git checkout -b develop  3d9eedbbf0d585207f97d5b21e42f32c0042df70 && cd .. \
    && git clone https://github.com/picobyte/stable-diffusion-webui-wd14-tagger.git && cd stable-diffusion-webui-wd14-tagger && git checkout -b develop  v1.2.0 && cd .. \
    && git clone https://github.com/Coyote-A/ultimate-upscale-for-automatic1111.git && cd ultimate-upscale-for-automatic1111 && git checkout -b develop 728ffcec7fa69c83b9e653bf5b96932acdce750f && cd .. 



####################################################################################################################################
--- 激活conda环境
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda init
source ~/.bashrc

-- 安装了插件后需要
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda init
source ~/.bashrc
conda activate xxxxx
cd ....stable-diffusion-webui
python -c "import launch;launch.prepare_environment();" 
pip install xformers==0.0.20 
# 下面两个是dreambooth需要的，但是不安装训练报错也不要紧-----
conda install cudatoolkit==11.8.0  # 这个只能用conda安装, 否则新版的dreambooth会报一大堆bug report
pip install tensorrt==8.6.0 # 可装可不装，用于dreambooth训练加速的，不装也不影响
pip install arrow==1.3.0  xpinyin==0.7.6 # 我的自定义插件要用
pip install torchaudio==2.0.1 --extra-index-url https://download.pytorch.org/whl/cu118 --no-dependencies  # 这个是sadtalker需要的


-- 汉化地址
https://github.com/VinsonLaro/stable-diffusion-webui-chinese/tree/main/localizations

-- 自动tag地址
/Users/yuanxiao/workspace/0yxgithub/yxdownloads/tag_auto_complate


--- 重要版本修改(因为a1111-sd-webui-locon不维护了) 
--现在命令行启动参数(--lyco-debug --lyco-patch-lora --lyco-dir ./models/Lora), 这样启动就可以替换原来的a1111-sd-webui-locon插件了，连提示词都不用改
https://github.com/KohakuBlueleaf/a1111-sd-webui-lycoris.git@8e97bf54867c25d00fc480be1ab4dae5399b35ef 代替原来的 https://github.com/KohakuBlueleaf/a1111-sd-webui-locon.git@b6911354f7641c49296b37a2b939c3c472624abc
####################################################################################################################################


--- 训练和tagger反推需要的环境变量---安装了stable-diffusion-webui-wd14-tagger和sd_dreambooth_extension需要用这个环境变量-----
ARG CUDNN_PATH=$(dirname $(/home/miniconda3/envs/sd_python310/bin/python -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)"))
ARG TENSORRT_PATH=$(dirname $(/home/miniconda3/envs/sd_python310/bin/python -c "import tensorrt;print(tensorrt.__file__)"))
ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/local/cuda/lib64:$CUDNN_PATH:$TENSORRT_PATH


####################################################################################################################################
重要步骤: 调试
--------------------------------------------------------------------------------------------------
# 调试:  (部署到云函数参考 readme_debug.txt)
# 调试: 先到原来的版本调试生产必要的目录(models下的目录比如GFPGAN等)和安装对应版本的xformers
# 重要参数 --skip-prepare-environment  可以跳过prepare_environment()函数,包含插件(插件目录的install.py文件)的的第三方安装都不会运行-我已经测试过了,不然会重新安装一些东西，耗时较长
# 如果有新插件需要安装，则不能要这个参数，因为插件也有第三方包需要安装
# 有预安装的命令--有新插件第一次运行这个(取消--skip-prepare-environment这个参数会自动安装确实的第三方插件) 
CUDNN_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)")) 
TENSORRT_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import tensorrt;print(tensorrt.__file__)")) 
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:$CUDNN_PATH:$TENSORRT_PATH
cd /mnt/sdwebui_public/versions/sdwebui_env/stable-diffusion-webui-20231102/stable-diffusion-webui
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python  launch.py  --listen --port 9965  --xformers  --medvram \
--lyco-debug --lyco-patch-lora --lyco-dir ./models/Lora \
--skip-prepare-environment

# 新的调试命令，如果没有lyco插件，则去掉--lyco-debug --lyco-patch-lora --lyco-dir ./models/Lora即可
# pytorch2.0其实可以去掉--xformers
# 参考sd1.6的显存优化命令:  https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Optimum-SDXL-Usage
nohup bash -c '
CUDNN_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)")) 
TENSORRT_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import tensorrt;print(tensorrt.__file__)")) 
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:$CUDNN_PATH:$TENSORRT_PATH
cd /mnt/sdwebui_public/versions/sdwebui_env/stable-diffusion-webui-20231102/stable-diffusion-webui
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python  launch.py  --listen --port 9965  --medvram \
--skip-prepare-environment' > nohup.out 2>&1 &
tail -f nohup.out 
kill $(echo $(pgrep -f "sd_python310_20231102/bin/python launch.py")) && rm nohup.out

--------------------------------------------------------------------------------------------------
# 调试(----废弃---已经合并到主分支，主分支v1.5.0已经支持sdxl， 虽然废弃，但下面的注释也是很好的参考):
# 参考: https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/11757
# sdxl模型下载: https://github.com/Stability-AI/generative-models
# sdxl的分支需要--no-half-vae (sdxl是1024*1024的默认分辨率--这个分辨率才能出非常好的效果，否则的话生成的图很乱,效果也不好)---阿里云需要开ecs.gn6i-c16g1.4xlarge 64GB内存以上的机器 # --
# sdxl的支持webui的vae下载： https://huggingface.co/stabilityai/sdxl-vae/tree/main
# --- 参考 https://www.reddit.com/r/StableDiffusion/comments/15agaqa/how_do_i_use_the_base_refiner_in_sdxl_10/ ---
# sdxl在webui的基本用法(下面是原理， 但是后面用这个插件解决-但感觉没有下面两步用的效果好，不用再切换模型了 https://github.com/wcde/sd-webui-refiner): 
# 1.用sd_xl_base_1.0.safetensors模型在1024*1024用文生图。2.将第一步得到的图用sd_xl_refiner_1.0.safetensors模型进行图生图，保持和第一步一样的prompt和seed，这样就可以得到更好的图了。
# ---
# sdxl的分支的commit号: dc3906185656dae75fcefe96625b1dcd0d31579c 14cf434bc36d0ef31f31d4c6cd2bd15d7857d5c8
# -- 可以选择我下的vae(改变vae需要重启sd)--好像vae无效---
cd /mnt/sdwebui_public/versions/sdwebui_env/stable-diffusion-webui-sdxl-20230715/stable-diffusion-webui
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sdxl_python310_20230715/bin/python launch.py  --listen --port 9965 --no-half-vae  --medvram \
--lyco-debug --lyco-patch-lora --lyco-dir ./models/Lora \
--skip-prepare-environment
--------------------------------------------------------------------------------------------------
# 调试:  最新的sd版本-----测试用(每次用sd最新版本测试即可)-----
# 预安装需要的包--
# /mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_lastest/bin/python -c "import launch;launch.prepare_environment();"
# 调试: 先到原来的版本调试生产必要的目录(models下的目录比如GFPGAN等)和安装对应版本的xformers
# 重要参数 --skip-prepare-environment  可以跳过prepare_environment()函数,包含插件(插件目录的install.py文件)的的第三方安装都不会运行-我已经测试过了,不然会重新安装一些东西，耗时较长
# 如果有新插件需要安装，则不能要这个参数，因为插件也有第三方包需要安装
# 有预安装的命令--有新插件第一次运行这个 
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda init;chmod +x ~/.bashrc;. ~/.bashrc;eval "$(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda shell.bash hook)";conda activate sd_python310_lastest;python -c "import sys; print(sys.executable)"
CUDNN_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_lastest/bin/python -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)")) 
TENSORRT_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_lastest/bin/python -c "import tensorrt;print(tensorrt.__file__)")) 
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:$CUDNN_PATH:$TENSORRT_PATH
cd /mnt/sdwebui_public/versions/sdwebui_env/stable-diffusion-webui-latest/stable-diffusion-webui
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_lastest/bin/python  launch.py  --listen --port 9002  --xformers  --medvram \
--lyco-debug --lyco-patch-lora --lyco-dir ./models/Lora \
--skip-prepare-environment
--------------------------------------------------------------------------------------------------
# 调试: （部署到ecs参考笔记[stablediffusionwebui安装过程之阿里云dreambooth-新版本nas版本]）
# dreambooth训练的模型(第一次运行不要用--skip-prepare-environment，因为有新插件需要安装)---
# 该版本的sd安装太爽了，没有各种报错，也不用降级torch了---sd version: version: v1.6.0  •  python: 3.10.0  •  torch: 2.0.1+cu118  •  xformers: 0.0.20  •  gradio: 3.41.2  •-------按上面dockerfile的版本安装即可----
# 安装：git clone  https://github.com/d8ahazard/sd_dreambooth_extension && cd sd_dreambooth_extension && git checkout -b develop  c2a5617c587b812b5a408143ddfb18fc49234edf && cd ..   # 这个不升级和以前的版本一样，因为最新版本有很多bug，生成的lora不能用
# 解决undefined symbol: cudaRuntimeGetVersion的报错需要到conda activate sd_python310_20231102环境下:
# conda install cudatoolkit==11.8.0  # 只能用conda安装，不要用pip； 执行的时候需要进入conda环境才行，就算python路径带有conda环境也不行，必须是activate的环境
# 解决方法：加下面这句即可----重要(必须安装这个cudatoolkit==11.8.0, tensorrt==8.6.0都可以不安装)-----  
# /bin/sh -c '/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda init;chmod +x ~/.bashrc;. ~/.bashrc;eval "$(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda shell.bash hook)";conda activate sd_python310_20231102;python -c "import sys; print(sys.executable)"'
# conda的cudatoolkit和官方的区别:   https://blog.csdn.net/qq_40947610/article/details/114707085
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda init;chmod +x ~/.bashrc;. ~/.bashrc;eval "$(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda shell.bash hook)";conda activate sd_python310_20231102;python -c "import sys; print(sys.executable)"
CUDNN_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)")) 
TENSORRT_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import tensorrt;print(tensorrt.__file__)")) 
LIBCUDART_PATH=$(dirname $(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)")))
LIBCUDART_PATH=$LIBCUDART_PATH/cuda_runtime/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:$CUDNN_PATH:$TENSORRT_PATH:$LIBCUDART_PATH
cd /mnt/sdwebui_public/versions/sdwebui_env/stable-diffusion-webui-20231102/stable-diffusion-webui
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python  launch.py   --listen --port 9965  --xformers  --medvram  \
--lyco-dir ./models/Lora \
--skip-prepare-environment

后台运行(记得加-u，否则日志无法输出)---
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda init;chmod +x ~/.bashrc;. ~/.bashrc;eval "$(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda shell.bash hook)";conda activate sd_python310_20231102;python -c "import sys; print(sys.executable)"
CUDNN_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)")) 
TENSORRT_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import tensorrt;print(tensorrt.__file__)")) 
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:$CUDNN_PATH:$TENSORRT_PATH
cd /mnt/sdwebui_public/versions/sdwebui_env/stable-diffusion-webui-dreambooth-20230724/stable-diffusion-webui
nohup /mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -u launch.py   --listen --port 9965  --xformers  --medvram \
--lyco-debug --lyco-patch-lora --lyco-dir ./models/Lora  \
--skip-prepare-environment > nohup.out 2>&1 &
tail -f nohup.out
杀死服务---
kill -9 $(ps -ef|grep launch.py|grep -v grep|awk '{print $2}')
或者
kill $(echo $(pgrep -f "sd_python310_20231102/bin/python launch.py")) && rm nohup.out
--------------------------------------------------------------------------------------------------
####################################################################################################################################



####################################################################################################################################
模拟云函数环境进行调试--------------------------sd_python310_20231102-----------------------
另外一种调试方法(带GPU的)--------复制到home目录模拟云函数环境进行调试---------
我的调试镜像打包好的:  sdwebui-aliynfunc-nas-debug（含GPU的）。
实例启动模板: sdwebui-aliynfunc-nas-debug （用上面的镜像和相关机型的，直接用即可）--------
--------------到带gpu的服务器执行下面命令（pip install tensorrt==8.6.0）----------------

/bin/sh -c 'echo ---------start-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
echo ---------start set env-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
CUDNN_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)")) && \
TENSORRT_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import tensorrt;print(tensorrt.__file__)")) && \
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:$CUDNN_PATH:$TENSORRT_PATH && \
echo ---------start rsync-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
if [ ! -d "/home/stable-diffusion-webui/modules" ]; then rsync -azP --no-perms --no-owner --no-group --exclude "/models" --exclude "/embeddings" --exclude "/scripts" --exclude "/samples" --exclude "/localizations" --exclude "/outputs"  /mnt/sdwebui_public/versions/sdwebui_env/stable-diffusion-webui-20231102/stable-diffusion-webui/ /home/stable-diffusion-webui; fi && \
echo ---------start update extensions-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
cd /home/stable-diffusion-webui/extensions/sd-webui-manage-yx; git checkout aliyun_func && \
rm -rf /home/stable-diffusion-webui/extensions/sd-webui-noui-yx && \
rm -rf /home/stable-diffusion-webui/extensions/sd_dreambooth_extension && \
echo ---------start ln base-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
if [ ! -d "/home/stable-diffusion-webui/models" ]; then mkdir /home/stable-diffusion-webui/models; fi && \
for dir in Codeformer deepbooru ESRGAN GFPGAN  karlo LDSR SwinIR VAE-approx; do if [ ! -L "/home/stable-diffusion-webui/models/$dir" ]; then ln -s /mnt/sdwebui_public/versions/sdwebui_env/stable-diffusion-webui-20231102/stable-diffusion-webui/models/$dir  /home/stable-diffusion-webui/models/; fi; done && \
for dir in hypernetworks  Lora  Stable-diffusion  VAE; do if [ ! -L "/home/stable-diffusion-webui/models/$dir" ]; then ln -s /mnt/sdwebui_public/public/models/$dir  /home/stable-diffusion-webui/models/; fi; done && \
for dir in  ControlNetXL; do if [ ! -L "/home/stable-diffusion-webui/models/ControlNet" ]; then ln -s /mnt/sdwebui_public/public/models/$dir  /home/stable-diffusion-webui/models/ControlNet; fi; done && \
for dir in embeddings  outputs  samples  scripts; do if [ ! -L "/home/stable-diffusion-webui/$dir" ]; then ln -s /mnt/sdwebui_public/public/$dir  /home/stable-diffusion-webui/; fi; done && \
for dir in localizations20231102; do if [ ! -L "/home/stable-diffusion-webui/localizations" ]; then ln -s /mnt/sdwebui_public/public/$dir  /home/stable-diffusion-webui/localizations; fi; done && \
echo ---------end-------$(date +"%Y-%m-%d %H:%M:%S")---------------
'
启动(可以在home目录下自行调试，不影响云函数的运行)---
cd /home/stable-diffusion-webui
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python  launch.py  --listen --port 9965  --xformers  --medvram --lyco-debug --lyco-patch-lora --lyco-dir ./models/Lora  --skip-prepare-environment

新版调试命令
bash -c 'cd /home/stable-diffusion-webui
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python  launch.py  --listen --port 9965  --xformers  --medvram \
--skip-prepare-environment
'

# Nvidia (12gb+) --xformers
# Nvidia (8gb) --medvram-sdxl --xformers
# Nvidia (4gb) --lowvram --xformers
# AMD (4gb) --lowvram --opt-sub-quad-attention + TAESD in settings
# 详细信息
# Both rocm and directml will generate at least 1024x1024 pictures at fp16. If your AMD card needs --no-half, try enabling --upcast-sampling instead, as full precision sdxl is too large to fit on 4gb.


调试完成后: 删除/home/stable-diffusion-webui即可
####################################################################################################################################







####################################################################################################################################
模拟ecs环境进行调试--------------------------sd_python310_20231102-----------------------
另外一种调试方法(带GPU的)--------复制到home目录模拟云函数环境进行调试---------
我的调试镜像打包好的:  sdwebui-aliynfunc-nas-debug（含GPU的）。
实例启动模板: sdwebui-aliynfunc-nas-debug （用上面的镜像和相关机型的，直接用即可）--------
--------------到带gpu的服务器执行下面命令（pip install tensorrt==8.6.0）----------------

/bin/sh -c 'echo ---------start-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
sleep 1 && \
echo ---------start set env-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
CUDNN_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)")) && \
TENSORRT_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import tensorrt;print(tensorrt.__file__)")) && \
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/usr/local/cuda/lib64:$CUDNN_PATH:$TENSORRT_PATH && \
echo ---------start rsync-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
if [ ! -d "/home/stable-diffusion-webui/modules" ]; then rsync -azP --no-perms --no-owner --no-group --exclude "/models/ControlNet" --exclude "/models/hypernetworks" --exclude "/models/Stable-diffusion" --exclude "/models/VAE" --exclude "/models/dreambooth" --exclude "/models/Lora" --exclude "/models/lora" --exclude "/models/BLIP" --exclude "/models/torch_deepdanbooru"  --exclude "/embeddings" --exclude "/scripts" --exclude "/samples" --exclude "/localizations" --exclude "/outputs"  /mnt/sdwebui_public/versions/sdwebui_env/stable-diffusion-webui-20231102/stable-diffusion-webui/ /home/stable-diffusion-webui; fi && \
echo ---------start ln base-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
for dir in  hypernetworks  Stable-diffusion BLIP torch_deepdanbooru; do if [ ! -L "/home/stable-diffusion-webui/models/$dir" ]; then ln -s /mnt/sdwebui_public/public/models/$dir  /home/stable-diffusion-webui/models/; fi; done && \
for dir in  ControlNetXL; do if [ ! -L "/home/stable-diffusion-webui/models/ControlNet" ]; then ln -s /mnt/sdwebui_public/public/models/$dir  /home/stable-diffusion-webui/models/ControlNet; fi; done && \
for dir in VAE; do if [ ! -d "/home/stable-diffusion-webui/models/$dir" ]; then cp -rf /mnt/sdwebui_public/public/models/$dir  /home/stable-diffusion-webui/models/; fi; done && \
if [ ! -d "/home/stable-diffusion-webui/models/Lora" ]; then mkdir /home/stable-diffusion-webui/models/Lora; fi && \
for dir in  outputs; do if [ ! -L "/home/stable-diffusion-webui/$dir" ]; then ln -s /mnt/sdwebui_public/public/$dir  /home/stable-diffusion-webui/; fi; done && \
for dir in localizations20231102; do if [ ! -L "/home/stable-diffusion-webui/localizations" ]; then ln -s /mnt/sdwebui_public/public/$dir  /home/stable-diffusion-webui/localizations; fi; done && \
for dir in embeddings  samples  scripts; do if [ ! -d "/home/stable-diffusion-webui/$dir" ]; then cp -rf /mnt/sdwebui_public/public/$dir  /home/stable-diffusion-webui/; fi; done && \
echo ---------end pre-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
echo ---------start launch pre-------$(date +"%Y-%m-%d %H:%M:%S")--------------- && \
sleep 2 && \
rm -rf /home/stable-diffusion-webui/styles.csv && \
ln -s /mnt/sdwebui_public/public/styles/styles.csv /home/stable-diffusion-webui/styles.csv
'

启动(可以在home目录下自行调试，不影响云函数的运行)---LD_LIBRARY_PATH的值是上面命令行最后一行的值,不然训练会报错，后面下面的命令加上上面的命令里面即可---------(实验sdxl的时候，需要加--no-half-vae参数)
cd /home/stable-diffusion-webui

nohup /bin/sh -c '/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda init;chmod +x ~/.bashrc;. ~/.bashrc;eval "$(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda shell.bash hook)";conda activate sd_python310_20231102;python -c "import sys; print(sys.executable)" && \
CUDNN_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)"))  && \
TENSORRT_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import tensorrt;print(tensorrt.__file__)"))  && \
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:$CUDNN_PATH:$TENSORRT_PATH && \
cd /home/stable-diffusion-webui && \
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python  launch.py  --listen --port 9965  --xformers --medvram --lyco-debug --lyco-patch-lora --lyco-dir ./models/Lora  --skip-prepare-environment
' > nohup.out 2>&1 &

新的调试命令，如果没有lyco插件，则去掉--lyco-*,  pytorch2.0其实可以去掉--xformers, 但是去掉xformers，图生图有问题，会爆精度错误
nohup /bin/sh -c '/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda init;chmod +x ~/.bashrc;. ~/.bashrc;eval "$(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/bin/conda shell.bash hook)";conda activate sd_python310_20231102;python -c "import sys; print(sys.executable)" && \
CUDNN_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)"))  && \
TENSORRT_PATH=$(dirname $(/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python -c "import tensorrt;print(tensorrt.__file__)"))  && \
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:$CUDNN_PATH:$TENSORRT_PATH && \
cd /home/stable-diffusion-webui && \
/mnt/sdwebui_public/versions/sdwebui_env/miniconda3/envs/sd_python310_20231102/bin/python  launch.py  --listen --port 9965   --xformers --medvram  --skip-prepare-environment
' > nohup.out 2>&1 &

tail -f nohup.out
kill $(echo $(pgrep -f "sd_python310_20231102/bin/python launch.py")) && rm nohup.out
调试完成后: 删除/home/stable-diffusion-webui即可

####################################################################################################################################

后续安装插件(云函数需要自定义ui插件, ecs不需要； 都需要noui插件)，修改style等等;参考 /Users/yuanxiao/workspace/0yxgithub/Stable-Diffusion-on-GCP/bugs.txt
搜索笔记【新版本nas版本】配置各个服务即可， 可以根据ecs启动的入口命令启动不同的版本

###########


----
sdxl在sdwebui-v1.6版本已经没有内存泄漏了(生成图片还是有轻微的内存泄漏，比以前好了)

----
该版本的controlnet的使用

controlnet----先不要enable， 配置好后再enable
   1. 图片要下载到本地(如果控制台报413错误，就是图片太大，云函数nginx截断了，后面修复了，截小一点的图)，拖到controlnet;不要直接复制进去，会导致enable选上。 
   2. 图片拖到controlnet后, 选择你需要的controlnet模型即可
   3. 选好后，点击enabled，第二次出图才会生效


controlnet----disabled
   1. disable调controlnet
   2. 删除controlnet图片
   3. 第一次出图就会生效


